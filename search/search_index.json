{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":""},{"location":"#elixir-lesson-title","title":"ELIXIR Lesson Title","text":""},{"location":"#authors","title":"Authors","text":"<p>Minghao Zhang</p> <p>  University of Cambridge </p> <p>Gaurav Bhalerao</p> <p>  University of Oxford </p> <p>Diana Pilvar</p> <p>  University of Tartu, ELIXIR Estonia </p> <p>Marina Popleteeva</p> <p>  University of Luxembourg </p> <p>Greek Mythology icons made by max.icons from www.flaticon.com</p>"},{"location":"#lesson-overview","title":"Lesson overview","text":"<p> Description Version control is the lab notebook of the digital world. It helps us understand what changes we made in the past and why we did a specific analysis in the way we did it. It is also vital for smooth collaboration where different people work on the same code simultaneously. Using version control for your research project means that your work is totally transparent, and because all your actions are recorded, it enables others to reproduce your studies.</p> <p>In this series, we will cover the basics of using Git with the GUI provided in PyCharm. Git is a open source, free of charge, and powerful version control tool, and we will demonstrate the few simple steps to boost your code organisation and reproducibility, all without the need of command line knowledge. We will then use GitHub to host and share our scripts, and show hands-on examples of how GitHub can facilitate code collaboration.</p> <p></p> <p> Prerequisites To be able to follow this course, learners should have knowledge in: \u20031. No previous knowledge of Git assumed \u20032. Able to understand and write simple Python scripts </p> <p></p> <p> Learning Outcomes: By the end of the course, learners will be able to: \u20031. Understand the purpose and functionality of version control tools (e.g. Git) \u20032. Know how to create and use a local repository with Git UI in PyCharm \u20033. Know how to collaborate on a remote repository on GitHub</p> <p></p> <p> Target Audience: Researchers, undergraduate students, postgraduate students, etc\u2026 </p> <p> Level: Beginner </p> <p> License: Creative Commons Attribution 4.0 International License </p> <p> Funding: This project has received funding from [name of funders].  </p>"},{"location":"#contributors","title":"Contributors","text":"<p>Kim Martin</p>"},{"location":"#citing-this-lesson","title":"Citing this lesson","text":"<p>Please cite as:</p> <ol> <li>Enter your citation here.</li> <li>Geert van Geest, Elin Kronander, Jose Alejandro Romero Herrera, Nadja \u017dlender, &amp; Alexia Cardona. (2023). The ELIXIR Training Lesson Template - Developing Training Together (v1.0.0-alpha). Zenodo. https://doi.org/10.5281/zenodo.7913092. </li> </ol>"},{"location":"#setup","title":"Setup","text":""},{"location":"#software-setup","title":"Software setup","text":"<p>To run this course you need to install Git. Details for Git setup is described in Chapter 3.</p> <p>We also introduce how to use Git with a GUI (GitHub Desktop as an example) / IDE (PyCharm as an example). </p>"},{"location":"course_schedule/","title":"Course schedule","text":"start end topic 10:00 10:30 coffee! 12:00 13:00 lunch! <p>Generate markdown tables at tablesgenerator.com</p>"},{"location":"follow_up_training/","title":"Follow up training","text":"<p>lorem ipsum</p>"},{"location":"chapters/chapter_01/","title":"1. What is version control","text":""},{"location":"chapters/chapter_01/#11-what-is-version-control","title":"1.1 What is version control?","text":"<p>Version control is a class of systems that record changes to a file or set of files over time so that you can recall specific versions later. </p> <p>Changes are usually identified by a number or letter code. For example, an initial set of files is \u201cversion 1\u201d or \u201crevision 1\u201d. When the first change is made, the resulting set is \u201cversion 2\u201d or \u201crevision 2\u201d, and so on. Each revision is associated with a timestamp and the person making the change. </p>"},{"location":"chapters/chapter_01/#12-why-do-we-need-version-control","title":"1.2 Why do we need version control?","text":"<p>There are multiple reasons why version control has become necessary: - Tracking changes. You can keep every version of an image, code or text. With each version, you can add message explaining why and what was changed. This way you can see how the file evolves over time. - Tracking Ownership. Version control keeps track of who made changes and you can see how much effort each person has put into a project to give credit accordingly.  - Backup and restore. When some part of your work gets accidentally deleted, it is easy to recover it. You can also recover a file as it was a few weeks/months/years ago.  - Synchronization. With big projects, multiple people are working on the same files. With version control programs it is easy to share files and keep your files updated to the latest version. - Short-term undo. Accidentally messed up a file? No worries, recover the last known good version. - Long-term undo. Introduced a bug a year ago? Jump back to that old version, see what change was made and why. - Sandboxing. Basicly an insurance. When implementing a big change you can test it in an isolated area and  resolve bugs before applying them. - Branching and Merging. You branch (copy the project to yourself)</p>"},{"location":"chapters/chapter_01/#13-available-version-control-tools","title":"1.3 Available version control tools","text":""},{"location":"chapters/chapter_01/#131-commercial","title":"1.3.1. Commercial","text":""},{"location":"chapters/chapter_01/#132-open-source","title":"1.3.2. Open Source","text":""},{"location":"chapters/chapter_01/#133-cloud-based","title":"1.3.3. Cloud-based","text":""},{"location":"chapters/chapter_02/","title":"2. Git & Git hosting services","text":""},{"location":"chapters/chapter_02/#21-first-subtopic","title":"2.1 First subtopic","text":"<p>Here you can enter text and if you need to cite<sup>1</sup></p> <p>Challenge 1</p> <p>This is an example of text of Challenge 1</p> Solution <p>This is an example solution for Challenge 1.</p>"},{"location":"chapters/chapter_02/#22-second-subtopic","title":"2.2 Second subtopic","text":""},{"location":"chapters/chapter_02/#23-third-subtopic","title":"2.3 Third subtopic","text":"<ol> <li> <p>When we share, everyone wins. Accessed: 2022-08-11. URL: https://creativecommons.org/.\u00a0\u21a9</p> </li> </ol>"},{"location":"chapters/chapter_04/","title":"4. Learn the workflow from case studies","text":""},{"location":"chapters/chapter_04/#4-learn-the-workflow-from-case-studies","title":"4 Learn the workflow from case studies","text":"<p>We have now installed Git on our local machine, familiarised ourselves with the interfaces, and tested out a local repository. However, to realize more advantages of version control (e.g. collaboration, improving reproducibility), we will need to take it online.</p> <p>This chapter will guide you through exactly how this is done, step by step, from simpler use cases to more advanced ones.</p> <p>As discussed previously, there are a wide variety of hosting services. Here, only as an example, we use the well-known GitHub platform as our remote server. </p>"},{"location":"chapters/chapter_04/#41-starting-a-new-single-person-repository","title":"4.1 Starting a new single person repository","text":"<p>In this example, we will make a fresh repository on GitHub, make some changes from the browser, and clone a local copy so that we can work on it offline.</p> <p>Info</p> <p>Chapter 4.2 describes the variation if you already have a local repository.</p>"},{"location":"chapters/chapter_04/#create-a-repo-on-github","title":"Create a repo on GitHub","text":"<p>First, log in to GitHub. Click the \u201c+\u201d and then \u201cNew repository\u201d on the top right corner.</p> <p></p> <p>Then, give the new repo a meaningful name (we will call it <code>learn-git</code>), and why not add a README file. Click the big green button at the bottom. Simple as that, we made a repository on GitHub.</p> <p></p>"},{"location":"chapters/chapter_04/#made-changes-from-the-browser","title":"Made changes from the browser","text":"<p>A very convenient feature of the online platforms like GitHub is that they allow us to make certain changes directly from the browser. For example, click into the <code>README.md</code> file, and then click on the pencil button on the right hand side:</p> <p></p> <p>Now we are in a text editor, and can make any changes we want to this file. Once finished, click the green \u201cCommit changes\u201d to save.</p> <p>Info</p> <p>Why the \u201cCommit changes\u201d, but not a simple \u201cSave\u201d? Remember, Git keeps a history for everything. By editing on from the browser, we have essentially done \u201csaving the file\u201d, \u201cstage the file\u201d and \u201ccommit changes\u201d with one step!</p> <p></p> <p>Here you can input a commit message to describe what changes you have made. Then click the green \u201cCommit changes\u201d button again, and all done.</p>"},{"location":"chapters/chapter_04/#clone-the-repo-to-local-computer","title":"Clone the repo to local computer","text":"<p>For day to day coding and scripting, we probably still want to work locally on our computers with IDEs or more sophisticated editors. To do this in our new repository, we first need to make a local clone on our computer. This is very easy to do.</p> <p>Go to the homepage of our repo on Github. Click the green \u201c&lt; &gt; Code\u201d button at the top right corner above the file list. Click on the \u201cSSH\u201d tab.</p> <p></p> <p>Info</p> <p>SSH is more secure than HTTPS. If you have set up your SSH keys successfully in the previous chapter, always try to use the SSH links.</p> <p>Now there are several options:</p> <ul> <li>If you are working with GitHub Desktop, simply click on the link \u201cOpen with GitHub Desktop\u201d. You can choose where you want to keep the local copy.</li> </ul> <p></p> <ul> <li>Otherwise, copy the line of link (with the button on the right). Go to your preferred IDE and clone the repo there. </li> </ul> <p></p> <ul> <li>If you work with commandlines, go to the parent folder where you want the new repo to be copied into, and then use the <code>git clone</code> command (replacing <code>&lt;some-parent-folder&gt;</code> and <code>&lt;your-github-id&gt;</code>):</li> </ul> <pre><code>cd &lt;some-parent-folder&gt;\ngit clone git@github.com:&lt;your-github-id&gt;/learn-git.git\n</code></pre> <p>Look inside the <code>learn-git</code> folder. You have the new repo cloned onto your computer!</p>"},{"location":"chapters/chapter_04/#make-changes-locally-and-keep-the-remote-updated","title":"Make changes locally and keep the remote updated","text":"<p>As you make new changes in this folder, you can make local commits just as you did in #3.6. </p> <p>Exercise</p> <p>If you want to make an edit to the <code>README.md</code> file, what steps do you need to take to make the commit?</p> Solution <ol> <li>Edit with an editor of your choice. </li> <li>Stage <code>README.md</code> file. </li> <li>Make commit. </li> </ol> <p>As long as you are on a single branch, the only extra step to take to update the remote is pushing. This sends all the local changes to the GitHub remote server.</p> <p>In GitHub Desktop, this is done by simply clicking the <code>Push</code> button on the top banner:</p> <p></p> <p>Have a look on the GitHub website. It\u2019s updated with the local changes!</p> <p></p>"},{"location":"chapters/chapter_04/#42-setting-up-a-new-online-repository-for-an-existing-local-repository","title":"4.2 Setting up a new online repository for an existing local repository","text":"<p>Sometimes, we may have already written some code and created a local repository (like what we did in #3.6). Now we want to set up a remote repository and send our code to it, so that our local work is backed up online, and later be shared.</p> <p>Here we use an example of <code>learn-git1</code> local repository with 2 files already commited.</p>"},{"location":"chapters/chapter_04/#publish-with-github-desktop","title":"Publish with GitHub Desktop","text":"<p>If you use GitHub Desktop, the process is very easy. On the top banner, click the <code>Publish repository</code> button.</p> <p></p> <p>Then enter descriptions and click publish! All done.</p> <p></p>"},{"location":"chapters/chapter_04/#without-github-desktop","title":"Without GitHub Desktop","text":"<p>The whole process is similar to Chapter 4.1, except in some small details. </p>"},{"location":"chapters/chapter_04/#create-a-repo-on-github_1","title":"Create a repo on GitHub","text":"<p>First, log in to GitHub. Click the \u201c+\u201d and then \u201cNew repository\u201d on the top right corner.</p> <p></p> <p>Then, give the new repo a meaningful name (probably sensible to be the same as your local folder name). To make life simple, do NOT initialize or add any files.</p> <p></p> <p>Exercise</p> <p>What will happen if we initialized with, e.g. a README file?</p> Solution <p>The remote repo on Github will have the README file, while our local repo does not. On the other hand, remember that our local repo has some existing codes that the remote does not have. Therefore, as soon as we try to link the two together, there will be a conflict.</p> <p>Click the big green button at the bottom to create the repo.</p>"},{"location":"chapters/chapter_04/#connect-to-the-local-repo","title":"Connect to the local repo","text":"<p>Since the new online repository is completely empty, GitHub then shows you exactly how to connect to the local repository.</p> <p>With your IDE, go to the version control tab and look for <code>Manage remote</code>. </p> <p></p> <p>Click <code>Add remote</code>, and paste in the URL to the GitHub repository page.</p> <p></p> <p>Now, do a push, which will update all the existing local commits to the remote.</p> <p></p> <p>That\u2019s all done! Have a look on the GitHub website. It\u2019s updated with the local changes!</p> <p></p>"},{"location":"chapters/chapter_04/#43-making-branches-and-collaborating","title":"4.3 Making branches and collaborating","text":"<p>Now the project is growing, and some colleagues want to work on the code together. Without Git, this would be a slow process, as only one of you can work on the code at a time. Otherwise, it would be difficult to combine the changes.</p> <p>With Git, however, code collaboration can work very efficiently. This is achieved by branching, merging and pull requests.</p>"},{"location":"chapters/chapter_04/#adding-collaborators","title":"Adding collaborators","text":"<p>You may have noticed the setting of public or private during the creation of the GitHub repository. They control whether this repository is visible to everyone. Being public, however, doesn\u2019t mean anyone can change the code in your repository.</p> <p>By default, only you, the repository owner, can contribute to the repository (push code). To add collaborators, go to the repository settings, and then \u201ccollaborators\u201d.</p> <p></p>"},{"location":"chapters/chapter_04/#editing-on-a-new-branch","title":"Editing on a new branch","text":"<p>As explained in Chapter 3 and 5, the purpose of branches is to separate different strands of work. </p> <p>Here for example, while your colleague will write some hypothesis tests on the data, you would like to make more plots to visualize data. So, before coding, you create and checkout a branch <code>visualization</code>.</p> <p>Checkout simply means making this the active branch, so that the following edits will be made on this branch.</p> <p>In GitHub Desktop, click the branch box on the top banner, and click new branch.</p> <p></p> <p>Enter the new branch name and create.</p> <p></p> <p>After switching, the active branch is now <code>visualization</code> which can be seen on the top banner.</p> <p>Alternatively, in PyCharm, create the new branch from the Git menu:</p> <p></p> <p>To verify the active branch, look for the Git symbol at the bottom of the screen. Most IDEs have a similar display.</p> <p></p> <p>Now you can modify the code, without the need to worry about what your colleague is doing. After some hard work in coding, you can stage, commit and push as usual. Everything is saved on the new <code>visualization</code> branch.</p>"},{"location":"chapters/chapter_04/#merging-and-pull-requests","title":"Merging and pull requests","text":"<p>When you think you have finished all the codes related to <code>visualization</code>, you will want to merge this branch back to the base branch (in our case <code>master</code>), so that collaborators and users will be able to see and use these codes by default.</p> <p>To do this, we first open a pull request (PR). </p> <p>Go to the repository webpage on GitHub, and click on the \u201cPull requests\u201d tab. GitHub likely realizes that you are opening the pull request for the most recent branch, <code>visualization</code>. Click the green \u201cCompare &amp; pull request\u201d button.</p> <p></p> <p>Info</p> <p>If there is no \u201cCompare &amp; pull request\u201d prompt, click on the \u201cNew pull request\u201d green button instead, and then manually choose which branch to merge.</p> <p>Then, GitHub will show what is different between the <code>visualization</code> and <code>master</code> branches. </p> <p></p> <p>When opening the pull request, remember to include a clear description of what changes are made in the new branch.</p> <p></p> <p>It may seem a little unnecessary if it is only you and your colleague sitting right next to your desk coding this together, but this will become really important when 15 collaborators end up working on the same project, most of whom only checking in once in a while\u2026</p> <p>On the right of the screen, there are several further details you can add to the PR:</p> <ul> <li>Reviewers are the people who will read and check your new code. This is usually different from the author of this PR. The importance of code review is covered in other parts of the CodeRep course.</li> <li>Assignees are the people who are responsible to work on the PR until it\u2019s merged into the master.</li> <li>Labels, projects and milestones are all \u2018tags\u2019 to signify the importance of the code in this PR. They are commonly used in larger projects.</li> </ul> <p>Let\u2019s go ahead and open the PR.</p>"},{"location":"chapters/chapter_04/#conflict-resolution","title":"Conflict resolution","text":"<p>In this case, your colleague has already finished their part on hypothesis tests. They have merged to <code>master</code> before you opened <code>visualization</code> PR. This has caused a conflict in the codes, which GitHub detects:</p> <p></p> <p>Note</p> <p>What exactly is causing this conflict?  In short, both <code>master</code> and <code>visualization</code> have changed the same file(s).</p> <p>In detail: When you started working on the master branch, you started from the commit labelled \u201cSPLIT\u201d on <code>master</code> branch. Now, you are trying to merge the \u201cCURRENT\u201d commit on <code>master</code> with \u201cLAST\u201d commit on <code>visualization</code>. Both \u201cCURRENT\u201d and \u201cLAST\u201d include changeds to <code>script.py</code>, but independent changes, from \u201cSPLIT\u201d. Therefore, Git is not sure how to merge these.</p> <p>Luckily, with Git, this is not scary at all. There are several ways to make this merge, and here we introduce a recommended workflow. </p> <p>Always try to keep <code>master</code> (or <code>main</code> or any base branches) clean.</p> <p>On the local computer, do a pull. Literally, this is the opposite of push, so the local is up-to-date with remote. Now the local repository also contains the work your colleague has done.</p> <p>In GitHub Desktop: </p> <p>In PyCharm: </p> <p>Check that you are still on <code>visualization</code>. Then merge <code>master</code> into <code>visualization</code>.</p> <p>In GitHub Desktop, there is a quick one-step button to do this: </p> <p>In PyCharm or other IDEs, go to merge: </p> <p>Which way to merge?</p> <p>The direction of merging can be confusing in the beginning. If you want to merge A into B (B end up containing changes of A), stay on (checkout) B, and perform merge A.</p> <p>Either way, you will hopefully be prompted the same conflict seen on the GitHub. This will automatically tell any IDE you use, that you are trying to resolve a merge conflict. For example in PyCharm,</p> <p></p> <p>Click resolve, and then click merge.</p> <p></p> <p>This will then bring up the Merge Revision window.</p> <p></p> <p>Here, one branch to merge is on the left (e.g. <code>visualization</code>), the other to merge on the right (e.g. <code>master</code>), and your desired merge results is in the middle. You can pick and choose whether you want to keep each changes on the two branches by clicking the \u201c&lt;&lt;\u201d or \u201c&gt;&gt;\u201d arrows next to the changes.</p> <p>In this case, both branches are adding new codes, so we want to include all changes. Finally click apply.</p> <p>If there are multiple files that have been changed both sides, go through this process for each file. Hopefully, in the end, everything will be resolved.</p> <p>GitHub Desktop shows this good new explicitly: </p> <p></p> <p>Click \u201ccontiunue merging\u201d, to make a commit after the merge work. Alternatively, in IDEs, simply make a new commit for all the merged files.</p> <p>Now, make a push again, and look at the PR page.</p> <p></p> <p>Great, no more conflicts to merge! The new code is now ready to be merged into the base branch - if the reviewer approves. So, suppose your colleague has no objection, click the green \u201cMerge pull request\u201d button and confirm.</p> <p>All the new visualization codes are now in the <code>master</code> branch. Meanwhile, the <code>visualization</code> branch is no longer needed, so GitHub suggests that you can delete that branch.</p> <p></p> <p>Important</p> <p>Why all the convoluted steps? In these steps, we introduced how to keep our working feature branch up-to-date with the new developments on <code>master</code>. In general, it is a very good practice to frequently pull and merge <code>master</code> (or another base branch) into the feature branch, instead of after all the work has finished. This way, it is less likely to see conflicts, and even if there are, they will be smaller ones which do not require a lot of head-scratching to resolve.</p>"},{"location":"chapters/chapter_05/","title":"5. Advanced topics","text":""},{"location":"chapters/chapter_05/#5-advanced-topics","title":"5. Advanced topics","text":""},{"location":"chapters/chapter_05/#51-git-branching-strategies","title":"5.1 Git branching strategies","text":"<p>So far, we have familiarised ourselves with a few simple workflows when using Git. In this section, we will have a birds-eye view of the branching strategies and discuss the choices. </p> <p>A note for the term flow - since a Git workflow always consists of stashing, commiting, pushing etc., whenever people talk about a Git-related flow, it is generally referring to the remaining, more dynamic parts of the workflow, particularly the branching and merging strategies.</p> <p>An organized and efficient workflow choice can be essential to the success of a project. Here we introduce four most common workflows used in Git.</p>"},{"location":"chapters/chapter_05/#centralized-workflow","title":"Centralized workflow","text":"<p>The simplest case which we have seen in ==Case Study 0==. There is only one branch and all changes are made on this branch. This is a nice and simple way to save checkpoints for your own work. </p> <p></p><pre><code>gitGraph\n    commit id: \"Initial code\"\n    commit id: \"Some changes\"\n    commit id: \"Some plots\"\n    commit id: \"More changes\"</code></pre> However, the centralized workflow does not allow easy collaboration, because every time two people make changes simultaneously, it will create a conflict on the branch. The following workflows can provide a more streamlined collaboration."},{"location":"chapters/chapter_05/#feature-branch-workflow","title":"Feature branch workflow","text":"<p>To overcome the limit with the centralized workflow, we can put a chunk of new work on a dedicated branch. This is what we did in ==case study 2==, and the method has several advantages - allows multiple collaborators to work simultaneously on different features, backing up their work along the way - no disruption to the code on <code>main</code> branch before the feature code is ready, suitable for continuous integration environment - allows discussions and assistances for a feature through e.g. pull requests</p> <p></p><pre><code>gitGraph\n    commit\n    branch feature1\n    commit\n    commit\n    checkout main\n    merge feature1\n    branch feature2\n    commit\n    checkout main\n    branch feature3\n    commit\n    checkout main\n    merge feature3\n    checkout feature2\n    commit</code></pre> The feature branch flow is the conventional workflow for repositories hosted on GitHub (partly because the UIs of GitHub is initially designed around it). Hence, it is also commonly referred to as the GitHub flow."},{"location":"chapters/chapter_05/#gitflow-workflow","title":"Gitflow workflow","text":"<p>The feature branch workflow is great for packages which can have continuous updates, but for many bigger projects, or softwares with a larger user base, it is important to have the concept of release. Users will want / need to know which \u201cversion number\u201d they are using.</p> <p>This is where the Gitflow workflow comes in. Building upon the feature branch workflow, it adds several branches with specific roles with rules for when and how to merge.</p> <p>The main development work happens exactly like in the feature branch workflow, except that the features branch off and merge into the <code>develop</code> branch instead of the <code>main</code>. When the code in <code>develop</code> is ready to be released, the changes are then merged back to the <code>main</code>. The commits on <code>main</code> are always production-ready, and each has a release number.</p> <p></p><pre><code>gitGraph\n    commit id: \"v0.1\"\n    branch develop\n    branch feature1\n    commit\n    commit\n    checkout develop\n    branch feature2\n    commit\n    commit\n    checkout develop\n    merge feature2\n    checkout feature1\n    commit\n    checkout develop\n    merge feature1\n    checkout main\n    merge develop id: \"v0.2\"</code></pre> Another dedicated branch is the <code>hotfix</code> branch, which serves (only) to fix bugs should they appear on the <code>main</code>. <pre><code>gitGraph\n    commit id: \"v1.0\"\n    branch hotfix-1.0.1\n    branch develop\n    checkout hotfix-1.0.1\n    commit\n    commit\n\n    checkout main\n    merge hotfix-1.0.1 id: \"v1.0.1\"\n    checkout develop\n    merge hotfix-1.0.1</code></pre> <p>Other possible branches include the <code>release</code> branches, which is used to prepare for a release (prepare the release metadata, fixing bugs before the release, etc.).</p>"},{"location":"chapters/chapter_05/#52-project-management-with-github","title":"5.2 Project management with GitHub","text":"<p>Project management with GitHub involves using the various features and tools provided by GitHub to plan, organize, track progress, and collaborate on software development and other types of projects. GitHub provides a platform for version control using Git, but it also offers project management capabilities to help teams streamline their workflow. Here\u2019s a step-by-step guide on how to use GitHub for project management:</p> <p>Create a GitHub Repository:</p> <p>Start by creating a GitHub repository for your project. This will serve as the central repository where all your project files and code are stored.</p> <p>Use Issues for Task Tracking:</p> <p>GitHub Issues are a great way to track tasks, bugs, and feature requests. You can create issues for different aspects of your project, assign them to team members, label them for categorization, and set milestones.</p> <p>Labels and Milestones:</p> <p>Use labels to categorize issues by type, priority, or any other relevant criteria. Milestones can be used to group related issues together, helping you plan sprints or releases.</p> <p>Projects:</p> <p>GitHub Projects are a powerful way to create Kanban-style boards or custom project boards. You can organize and prioritize issues within these boards and track their progress from \u201cTo Do\u201d to \u201cIn Progress\u201d to \u201cDone.\u201d</p> <p>Pull Requests:</p> <p>For code changes, create branches in your repository and submit pull requests to merge them into the main branch (usually master or main). Pull requests serve as a way to review code changes, discuss them, and ensure quality control before merging.</p> <p>Assignees and Reviewers:</p> <p>Assign issues and pull requests to specific team members. You can also request reviews from others before merging code changes.</p> <p>GitHub Actions:</p> <p>Use GitHub Actions to automate workflows, such as continuous integration and continuous deployment (CI/CD). This helps in automatically testing and deploying your code when changes are pushed to the repository.</p> <p>Wiki and Documentation:</p> <p>GitHub provides a wiki feature where you can document your project. This is a great place to keep project-related information, user guides, and other documentation.</p> <p>Notifications and Discussions:</p> <p>GitHub notifies team members about changes, mentions, and updates related to issues and pull requests. Use the discussion features to have conversations around specific topics.</p> <p>Integrations:</p> <p>GitHub offers numerous integrations with third-party tools like Slack, Trello, and more. These integrations can help streamline your project management workflow.</p> <p>Security Scanning:</p> <p>GitHub provides security scanning features to help identify and remediate security vulnerabilities in your codebase.</p> <p>Analytics and Insights:</p> <p>GitHub provides various analytics and insights to track the progress of your project, codebase contributions, and more.</p> <p>Collaboration Guidelines:</p> <p>Establish clear collaboration guidelines and workflows for your team, including branch naming conventions, code review processes, and issue triage.</p> <p>Documentation Best Practices:</p> <p>Encourage the team to keep code and project documentation up to date. A well-documented project is easier to manage.</p> <p>Regular Reviews and Retrospectives:</p> <p>Conduct regular team reviews and retrospectives to evaluate your project management process and make improvements.</p> <p>By following these steps and utilizing GitHub\u2019s features effectively, you can streamline project management, enhance collaboration, and ensure the success of your software development or other projects. Let\u2019s walk through an example of how to do project management using GitHub for a hypothetical software development project. In this scenario, we\u2019ll create a simple project to build a website. Here\u2019s a step-by-step guide:</p> <p>Step 1: Create a GitHub Repository</p> <ol> <li> <p>Go to GitHub (https://github.com/) and log in to your account.</p> </li> <li> <p>Click the \u201c+\u201d sign in the top right corner and select \u201cNew Repository.\u201d</p> </li> <li> <p>Name your repository (e.g., \u201cWebsite-Project\u201d).</p> </li> <li> <p>Choose visibility (public or private) and other settings as needed.</p> </li> <li> <p>Click \u201cCreate repository.\u201d</p> </li> </ol> <p>Step 2: Create Issues</p> <ol> <li> <p>Inside your repository, click on the \u201cIssues\u201d tab.</p> </li> <li> <p>Click the green \u201cNew issue\u201d button.</p> </li> <li> <p>Create issues for various tasks, such as \u201cDesign homepage,\u201d \u201cDevelop contact form,\u201d and \u201cTest website on mobile devices.\u201d</p> </li> <li> <p>Assign these issues to team members by mentioning their GitHub usernames.</p> </li> <li> <p>Add labels (e.g., \u201cbug,\u201d \u201cenhancement,\u201d \u201cfeature\u201d) to categorize issues.</p> </li> </ol> <p>Step 3: Create Milestones</p> <ol> <li> <p>Click the \u201cMilestones\u201d tab in the \u201cIssues\u201d section.</p> </li> <li> <p>Create milestones for project phases, such as \u201cDesign Phase,\u201d \u201cDevelopment Phase,\u201d and \u201cTesting Phase.\u201d</p> </li> <li> <p>Assign issues to the appropriate milestones.</p> </li> </ol> <p>Step 4: Set Up a GitHub Project Board</p> <ol> <li> <p>Click the \u201cProjects\u201d tab.</p> </li> <li> <p>Create a new project board and name it (e.g., \u201cWebsite Project Board\u201d).</p> </li> <li> <p>Add columns to the board, like \u201cTo Do,\u201d \u201cIn Progress,\u201d \u201cReview,\u201d and \u201cDone.\u201d</p> </li> <li> <p>Add issues to the \u201cTo Do\u201d column by dragging and dropping them from the issues list.</p> </li> </ol> <p>Step 5: Collaborate on Code with Pull Requests</p> <ol> <li> <p>Create a branch for a specific feature or task (e.g., <code>feature/homepage-design</code>).</p> </li> <li> <p>Make code changes in that branch.</p> </li> <li> <p>Create a pull request (PR) to merge changes into the main branch.</p> </li> <li> <p>Request code reviews from team members.</p> </li> <li> <p>Discuss and make necessary changes in the PR conversation.</p> </li> <li> <p>Merge the PR when it\u2019s approved.</p> </li> </ol> <p>Step 6: Automate with GitHub Actions</p> <ol> <li> <p>Go to the \u201cActions\u201d tab in your repository.</p> </li> <li> <p>Create workflows using GitHub Actions to automate tasks like code testing and deployment.</p> </li> <li> <p>Configure workflows with YAML files in your repository.</p> </li> </ol> <p>Step 7: Wiki and Documentation</p> <ol> <li> <p>Create a Wiki by going to the \u201cWiki\u201d tab and add documentation for the project.</p> </li> <li> <p>Document coding standards, deployment processes, and other relevant information.</p> </li> </ol> <p>Step 8: Collaborate and Discuss</p> <ol> <li> <p>Use GitHub discussions or comments on issues and pull requests to have conversations with your team.</p> </li> <li> <p>Notify team members by mentioning their GitHub usernames.</p> </li> </ol> <p>Step 9: Review Analytics and Insights</p> <ol> <li> <p>Use the \u201cInsights\u201d tab in your repository to track code contributions, issue progress, and project statistics.</p> </li> <li> <p>Analyze these insights to make informed decisions.</p> </li> </ol> <p>Step 10: Integrate with Third-party Tools</p> <ol> <li>Integrate GitHub with tools like Slack or Trello to receive notifications and enhance collaboration.</li> </ol> <p>Step 11: Conduct Regular Reviews and Retrospectives</p> <ol> <li> <p>Schedule regular team meetings to review project progress and discuss improvements.</p> </li> <li> <p>Use the project board, issues, and analytics to guide your discussions.</p> </li> </ol> <p>By following these steps and adapting them to your project\u2019s needs, you can effectively manage your software development project using GitHub. It provides a structured and collaborative environment to track tasks, manage code, automate processes, and ensure successful project delivery.</p>"},{"location":"chapters/chapter_05/#53-publishing-webpages-with-github","title":"5.3 Publishing webpages with GitHub","text":"<p>Publishing webpages with GitHub is straightforward, and it\u2019s commonly done using GitHub Pages, which is a free hosting service provided by GitHub. Here are the steps to publish webpages with GitHub:</p> <p>Step 1: Create a GitHub Repository</p> <ol> <li> <p>Log in to your GitHub account (or create one if you don\u2019t have it).</p> </li> <li> <p>Click the \u201c+\u201d sign in the top right corner and select \u201cNew Repository.\u201d</p> </li> <li> <p>Name your repository following this format: <code>&amp;lt;your-username&gt;.github.io</code>. For example, if your username is \u201cjohnsmith,\u201d your repository should be named \u201cjohnsmith.github.io.\u201d</p> </li> <li> <p>Choose visibility (public or private) and other settings as needed.</p> </li> <li> <p>Click \u201cCreate repository.\u201d</p> </li> </ol> <p>Step 2: Create Your Webpage</p> <ol> <li>Inside your repository, you can create your webpage files. The main entry point for your webpage should be named <code>index.html</code>. You can also include CSS, JavaScript, and other assets as needed.</li> </ol> <p>Step 3: Commit and Push Your Webpage Files</p> <ol> <li>Add your webpage files to your repository.</li> </ol> <pre><code>git add .\n</code></pre> <ol> <li>Commit the changes.</li> </ol> <pre><code>git commit -m \"Initial commit\"\n</code></pre> <ol> <li>Push the changes to your GitHub repository.</li> </ol> <pre><code>git push origin main\n</code></pre> <p>(Note: GitHub Pages typically uses the <code>main</code> branch as the source for your webpage, but it can also use the <code>master</code> branch.)</p> <p>Step 4: Enable GitHub Pages</p> <ol> <li> <p>Go to your GitHub repository on the GitHub website.</p> </li> <li> <p>Click on the \u201cSettings\u201d tab.</p> </li> <li> <p>Scroll down to the \u201cGitHub Pages\u201d section.</p> </li> </ol> <p>Step 5: Configure GitHub Pages</p> <ol> <li> <p>Under \u201cSource,\u201d select the branch that contains your webpage files. This is usually the <code>main</code> branch.</p> </li> <li> <p>Once you select the branch, GitHub Pages will automatically build and deploy your webpage.</p> </li> <li> <p>Optionally, you can choose a custom domain name under the \u201cCustom domain\u201d section if you have one.</p> </li> </ol> <p>Step 6: Save and Access Your Published Webpage</p> <ol> <li> <p>Scroll down and click \u201cSave\u201d to enable GitHub Pages with your chosen settings.</p> </li> <li> <p>GitHub Pages will provide a URL where your webpage is published. It will typically be in the format: <code>https://&amp;lt;your-username&gt;.github.io</code>.</p> </li> </ol> <p>Step 7: Access Your Published Webpage</p> <ol> <li> <p>Open a web browser and navigate to the URL provided by GitHub Pages.</p> </li> <li> <p>You should see your published webpage.</p> </li> </ol> <p>Now, your webpage is live and publicly accessible on the internet through GitHub Pages. Any changes you make to your repository, including updating your HTML, CSS, or JavaScript files and pushing those changes to your GitHub repository, will automatically update your webpage. GitHub Pages is a powerful and free way to host static websites and documentation, and it\u2019s widely used for personal websites, project documentation, and more.</p>"},{"location":"chapters/chapter_05/#53-cici-with-github","title":"5.3 CI/CI with GitHub","text":"<p>Continuous Integration and Continuous Deployment (CI/CD) with GitHub involves automating the process of building, testing, and deploying your code whenever changes are made to your GitHub repository. Below, I\u2019ll provide a step-by-step example of setting up CI/CD using GitHub Actions, which is GitHub\u2019s built-in CI/CD tool.</p> <p>In this example, we\u2019ll assume you have a GitHub repository containing a simple web application that you want to build, test, and deploy to a web server whenever changes are pushed to the repository.</p> <p>Step 1: Set Up Your GitHub Repository</p> <ol> <li>Create a GitHub repository for your project if you haven\u2019t already.</li> </ol> <p>Step 2: Create a GitHub Actions Workflow</p> <p>GitHub Actions workflows are defined in YAML files within your repository. Here\u2019s how to create one:</p> <ol> <li> <p>In your GitHub repository, create a <code>.github/workflows</code> directory if it doesn\u2019t exist.</p> </li> <li> <p>Inside the <code>workflows</code> directory, create a new YAML file (e.g., <code>ci-cd.yml</code>) for your CI/CD workflow.</p> </li> </ol> <p>Step 3: Define Your Workflow</p> <p>In your <code>ci-cd.yml</code> file, define the steps for your workflow. Below is a simple example for a Node.js application:</p> <pre><code>name: CI/CD Pipeline\n\non:\n\n  push:\n\n    branches:\n\n      - main\n\njobs:\n\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n\n    - name: Checkout code\n\n      uses: actions/checkout@v2\n\n    - name: Set up Node.js\n\n      uses: actions/setup-node@v2\n\n      with:\n\n        node-version: 14\n\n    - name: Install dependencies\n\n      run: npm install\n\n    - name: Build and test\n\n      run: npm run build\n\n    - name: Deploy to server\n\n      run: |\n\n        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} 'cd /path/to/your/app &amp;&amp; git pull &amp;&amp; npm install &amp;&amp; npm run build'\n</code></pre> <p>This workflow does the following:</p> <ul> <li> <p>It triggers on pushes to the <code>main</code> branch.</p> </li> <li> <p>It checks out the code, sets up Node.js, installs dependencies, builds the application, and then deploys it to a server using SSH.</p> </li> </ul> <p>Step 4: Set Up Secrets</p> <p>For security reasons, don\u2019t hardcode sensitive information (e.g., SSH keys) directly into your workflow file. Instead, use GitHub secrets. To set up secrets:</p> <ol> <li> <p>In your repository, go to \u201cSettings\u201d &gt; \u201cSecrets.\u201d</p> </li> <li> <p>Click \u201cNew repository secret\u201d and add secrets like <code>SERVER_USER</code>, <code>SERVER_IP</code>, and any others your workflow needs.</p> </li> </ol> <p>Step 5: Commit and Push Your Workflow</p> <p>Commit your <code>ci-cd.yml</code> file to your repository and push it to GitHub.</p> <p>Step 6: GitHub Actions Execution</p> <p>GitHub Actions will automatically detect your workflow and execute it whenever changes are pushed to the <code>main</code> branch. You can monitor the progress of your workflow by going to the \u201cActions\u201d tab in your repository on GitHub.</p> <p>Step 7: Access Your Deployed Application</p> <p>Once the workflow is successful, your application is deployed. You can access it using the URL where your server is hosted.</p> <p>This is a simplified example, and real-world CI/CD workflows can be much more complex, depending on your project\u2019s requirements. You can extend the workflow to include additional steps like testing, deployment to multiple environments, notifications, and more. The key is to define your workflow steps in the YAML file, set up secrets for sensitive information, and let GitHub Actions handle the automation.</p>"},{"location":"chapters/chapter_06/","title":"6. Data management, data sharing & ethical issues","text":""},{"location":"chapters/chapter_06/#6-data-management-data-sharing-and-ethical-issues","title":"6. Data management, data sharing and ethical issues","text":""},{"location":"chapters/chapter_06/#61-licensing","title":"6.1 Licensing","text":"<p>Licensing is an essential aspect of open-source projects hosted on GitHub, as it defines how others can use, modify, and distribute your project\u2019s code. GitHub provides a platform for collaboration, but it\u2019s up to the project owner to choose an appropriate license for their project. Here\u2019s a step-by-step guide on how to license your project on GitHub:</p> <p>Step 1: Choose a License</p> <p>Before you can license your project, you need to choose a license that aligns with your project\u2019s goals and your preferences for how others can use your code. Common open-source licenses include the MIT License, Apache License 2.0, GNU General Public License (GPL), and many others. You can find a list of licenses and their descriptions on websites like choosealicense.com and opensource.org.</p> <p>Step 2: Create a License File</p> <p>Once you\u2019ve selected a license, you need to create a file in your project repository that contains the full text of the chosen license. You can name this file \u201cLICENSE\u201d or \u201cLICENSE.txt\u201d and place it in the root directory of your repository.</p> <p>For example, if you choose the MIT License, the \u201cLICENSE\u201d file might look like this:</p> <p>MIT License</p> <p>Copyright (c) [year] [your name]</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all</p> <p>copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p> <p>Step 3: Commit and Push the License File</p> <p>After creating the license file, commit it to your repository and push the changes to GitHub. This will make the license text accessible to anyone who visits your repository.</p> <pre><code>git add LICENSE\n\ngit commit -m \"Add MIT License\"\n\ngit push origin main\n</code></pre> <p>Step 4: Indicate the License in Your Repository</p> <p>To ensure that GitHub correctly recognizes your chosen license, you can specify it in the repository settings:</p> <ol> <li> <p>Go to your GitHub repository on the GitHub website.</p> </li> <li> <p>Click on the \u201cSettings\u201d tab.</p> </li> <li> <p>In the left sidebar, click on \u201cOptions.\u201d</p> </li> <li> <p>Scroll down to the \u201cGitHub\u201d section.</p> </li> <li> <p>Under \u201cLicense,\u201d select the license you\u2019ve chosen from the dropdown menu.</p> </li> <li> <p>Click \u201cSave\u201d to update your repository settings.</p> </li> </ol> <p>By following these steps, your project is now properly licensed, and others will know how they can use and contribute to your codebase. Always make sure to choose a license that aligns with your project\u2019s goals and the level of openness you desire for your code. Additionally, consider including a <code>LICENSE</code> badge in your README file to prominently display your project\u2019s license.</p>"},{"location":"chapters/chapter_06/#62-citation","title":"6.2 Citation","text":"<p>Citing GitHub projects is essential when you\u2019re referencing or using code or other materials from a repository in your academic, research, or documentation work. Proper citation gives credit to the original authors and helps readers locate the source. Below is an example of how to cite a GitHub project, along with a common citation style (APA) and a modified example for other citation styles like MLA or Chicago.</p> <p>GitHub Repository Citation Example (APA Style):</p> <p>Author(s). (Year). Title of the GitHub repository. GitHub. URL</p> <p>Here\u2019s an example:</p> <p>Smith, J. (2022). Awesome Project: A Collection of Useful Code. GitHub. https://github.com/johnsmith/awesome-project</p> <p>GitHub Repository Citation Example (MLA Style):</p> <p>Author(s). \u201cTitle of the GitHub repository.\u201d GitHub, Year, URL.</p> <p>Example:</p> <p>Smith, John. \u201cAwesome Project: A Collection of Useful Code.\u201d GitHub, 2022, https://github.com/johnsmith/awesome-project.</p> <p>GitHub Repository Citation Example (Chicago Style):</p> <p>Author(s), \u201cTitle of the GitHub repository,\u201d GitHub, Year, URL.</p> <p>Example:</p> <p>Smith, John, \u201cAwesome Project: A Collection of Useful Code,\u201d GitHub, 2022, https://github.com/johnsmith/awesome-project.</p> <p>In these examples:</p> <ul> <li>Author(s): Include the name(s) of the project owner(s) or contributor(s). If it\u2019s an organization, you can use the organization\u2019s name.</li> <li>Year: Mention the year when you accessed or used the GitHub repository. If the project has a specific release or version, you may want to mention that instead.</li> <li>Title of the GitHub repository: Include the name of the GitHub repository as it appears on the repository\u2019s main page.</li> <li>GitHub: Indicate that the source is from GitHub to clarify the platform.</li> <li>URL: Provide the full URL of the GitHub repository. Ensure it\u2019s clickable in your document.</li> </ul> <p>Please note that citation styles may vary depending on the guidelines of your institution, publisher, or the specific style guide you are using. Always follow the citation style recommended or required by the organization or publication you are submitting your work to.</p>"},{"location":"chapters/chapter_06/#63-sharing-repositories","title":"6.3 Sharing repositories","text":"<p>Sharing GitHub repositories while considering intellectual property (IP) concerns is crucial to protect your work, respect the rights of others, and ensure that you are compliant with GitHub\u2019s terms of service. Here are some guidelines on how to share GitHub repositories with IP considerations in mind:</p> <ol> <li>Understand Intellectual Property Rights:</li> </ol> <ul> <li>Before sharing any code on GitHub, make sure you understand intellectual property rights, including copyright, licenses, and patents. Know your rights and responsibilities.</li> </ul> <ol> <li>Choose the Right License:</li> </ol> <ul> <li>Select an appropriate open-source license for your project. Common licenses include MIT, Apache 2.0, GNU GPL, and more. The license you choose defines how others can use, modify, and distribute your code. Clearly specify the license in your repository.</li> </ul> <ol> <li>Respect Third-Party Licenses:</li> </ol> <ul> <li>If your project includes code, libraries, or assets from third parties, ensure that you comply with their licenses. Check the licenses of any dependencies and follow their requirements.</li> </ul> <ol> <li>Use License Files:</li> </ol> <ul> <li>Include a LICENSE file in your repository that contains the full text of the chosen license. This makes it clear to users how they can use your code.</li> </ul> <ol> <li>Add a NOTICE File:</li> </ol> <ul> <li>If required by your license, include a NOTICE file to give attribution to contributors and provide any additional information required by the license.</li> </ul> <ol> <li>Avoid Unauthorized Code:</li> </ol> <ul> <li>Do not include code or assets in your repository that you do not have the legal right to use. This includes proprietary code or assets without permission.</li> </ul> <ol> <li>Handle Sensitive Information Carefully:</li> </ol> <ul> <li>Avoid committing sensitive information, such as API keys, passwords, or personal data, to your repository. Use environment variables or configuration files outside of your repository for such information.</li> </ul> <ol> <li>Use Private Repositories if Necessary:</li> </ol> <ul> <li>If your project contains sensitive or proprietary information that should not be public, consider using a private repository on GitHub. Private repositories restrict access to collaborators you invite.</li> </ul> <ol> <li>Collaborate Transparently:</li> </ol> <ul> <li>Clearly document your project\u2019s contributors and give proper credit to their contributions. Use the GitHub \u201cContributors\u201d section and include their names in your README or documentation.</li> </ul> <ol> <li> <p>Maintain a Contributor License Agreement (CLA):</p> <ul> <li>If your project is widely used and you want to manage contributions and intellectual property more formally, consider implementing a Contributor License Agreement (CLA). CLAs define the terms under which contributions are made.</li> </ul> </li> <li> <p>Regularly Review and Update:</p> <ul> <li>Periodically review your project to ensure that it complies with licenses and any legal requirements. Update licenses and dependencies as needed.</li> </ul> </li> <li> <p>Seek Legal Advice:</p> <ul> <li>If you have complex IP concerns or are unsure about any legal matters, consider seeking legal advice from a qualified attorney experienced in open-source licensing and intellectual property.</li> </ul> </li> </ol> <p>By following these guidelines and being mindful of intellectual property considerations, you can safely and responsibly share GitHub repositories while respecting the rights of contributors and third-party dependencies.</p>"},{"location":"chapters/chapter_06/#64-social","title":"6.4 Social","text":""},{"location":"chapters/chapter_06/#follow-people-organisations","title":"Follow people, organisations:","text":"<p>You can follow people on GitHub to receive notifications about their activity and discover projects in their communities.</p> <p>When you follow people, you\u2019ll see their public activity on your personal dashboard. If someone you follow stars a public repository, GitHub may recommend the repository to you. For more information, see \u201cAbout your personal dashboard.\u201d</p> <p>You can unfollow someone if you do not wish to see their public activity on GitHub.</p> <pre><code>Following a user on GitHub:\n</code></pre> <ul> <li>Navigate to the user\u2019s profile page.</li> <li> <p>Under the user\u2019s profile picture, click Follow.</p> <p>Unfollowing a user on GitHub:</p> </li> <li> <p>Navigate to the user\u2019s profile page.</p> </li> <li> <p>Under the user\u2019s profile picture, click Unfollow.</p> <p>Viewing followed users on GitHub:</p> </li> <li> <p>Navigate to the user\u2019s profile page.</p> </li> <li>Under the user\u2019s profile picture, click following.</li> </ul> <p>GitHub also provide ways to keep track of users and their activity on the platform. Here\u2019s how you can do it:</p> <ol> <li>Watch Users\u2019 Repositories:</li> </ol> <p>You can watch repositories created by users you are interested in. When you watch a repository, you\u2019ll receive notifications about its activity, including issues, pull requests, and discussions. To watch a repository:</p> <ul> <li> <p>Go to the user\u2019s repository that you want to watch.</p> </li> <li> <p>Click the \u201cWatch\u201d button at the top-right of the repository page.</p> </li> <li> <p>Choose whether you want to be notified for \u201cAll activity,\u201d \u201cReleases only,\u201d or \u201cNot notified.\u201d Select your preference.</p> </li> </ul> <ol> <li>Star Repositories:</li> </ol> <p>Starring a repository is a way to bookmark or mark a repository as interesting. While it doesn\u2019t directly notify you about the user\u2019s activity, it helps you keep track of repositories you find noteworthy. To star a repository:</p> <ul> <li> <p>Go to the user\u2019s repository that you want to star.</p> </li> <li> <p>Click the \u201cStar\u201d button at the top-right of the repository page.</p> </li> </ul> <ol> <li>Follow Users on Twitter or Other Social Media:</li> </ol> <p>Some GitHub users share their activity and updates on social media platforms like Twitter. If you want to keep up with someone\u2019s GitHub activity, you can follow them on these external platforms where they may share links to their GitHub repositories and updates.</p> <ol> <li>Explore GitHub Activity:</li> </ol> <p>You can explore GitHub\u2019s activity feed, which shows public activity from users you follow or repositories you\u2019ve starred. This can help you keep track of recent contributions by users you are interested in.</p> <p>To access your activity feed, go to your GitHub homepage when you\u2019re logged in, and you\u2019ll see a feed of recent activity from users and repositories you follow.</p> <p>Please note that GitHub\u2019s features and interface may change over time, so it\u2019s a good idea to check the GitHub documentation or the platform itself for any updates or changes in how you can follow or interact with other users. Additionally, GitHub\u2019s main focus is on collaboration and open-source projects, so it may not provide the same level of social interaction features as traditional social media platforms.</p>"},{"location":"chapters/chapter_06/#watching-the-repository","title":"Watching the repository","text":"<p>To watch a GitHub repository means to receive notifications and updates about its activity, including new issues, pull requests, comments, and more. It\u2019s a way to stay informed about changes happening in repositories you\u2019re interested in. Here\u2019s how to watch a GitHub repository:</p> <ol> <li>Navigate to the Repository:</li> </ol> <p>Go to the GitHub repository you want to watch. You can do this by entering the repository\u2019s URL in your web browser or by searching for the repository on GitHub.</p> <ol> <li>Watch the Repository:</li> </ol> <p>Once you\u2019re on the repository page, you\u2019ll see a button at the top-right corner labeled \u201cWatch.\u201d Click on it.</p> <ol> <li>Choose Notification Settings:</li> </ol> <p>After clicking \u201cWatch,\u201d a dropdown menu will appear with options for notification settings. You can select one of the following options:</p> <ul> <li> <p>Not watching: This means you won\u2019t receive any notifications.</p> </li> <li> <p>Watching: You\u2019ll receive notifications for all activity, including issues, pull requests, and more.</p> </li> <li> <p>Custom: You can customize your notification preferences. This allows you to choose which types of events you want to be notified about.</p> </li> </ul> <ol> <li>Confirm Your Selection:</li> </ol> <p>Once you\u2019ve chosen your notification settings, click on the option you prefer. A checkmark will appear next to your selection.</p> <ol> <li>Star the Repository (Optional):</li> </ol> <p>While watching a repository doesn\u2019t require you to star it, you might want to do so if you find the repository particularly interesting or useful. Starring a repository is similar to bookmarking it.</p> <p>To star a repository, you can click the \u201cStar\u201d button located next to the \u201cWatch\u201d button at the top-right corner of the repository page.</p> <ol> <li>Unwatch or Manage Notifications (Optional):</li> </ol> <p>If you ever want to stop watching a repository or manage your notification settings, you can do so by going to the repository and clicking the \u201cUnwatch\u201d button (which will appear in place of the \u201cWatch\u201d button after you\u2019ve started watching it). You can also manage your notification settings in your GitHub account settings.</p> <p>By following these steps, you\u2019ll start watching the GitHub repository, and you\u2019ll receive notifications based on your chosen notification settings whenever there is activity in that repository. Watching repositories is a great way to stay up-to-date with open-source projects, track issues, and engage with the GitHub community.</p>"},{"location":"chapters/chapter_06/#community-support","title":"Community support","text":"<p>Getting community support on GitHub involves engaging with the open-source community to seek help, share knowledge, and collaborate on projects. Here are several ways you can get community support on GitHub:</p> <ol> <li>GitHub Discussions:</li> </ol> <ul> <li>Many repositories have a \u201cDiscussions\u201d tab where you can ask questions, share ideas, or seek help from maintainers and the community. You can start or participate in discussions related to the project.</li> </ul> <ol> <li>Issue Tracker:</li> </ol> <ul> <li>If you encounter a bug or have a specific problem with a project, check the project\u2019s issue tracker. Often, there are existing issues or bug reports that can help you find solutions or workarounds. You can also open a new issue to report problems or request assistance.</li> </ul> <ol> <li>Contribute to Open-Source Projects:</li> </ol> <ul> <li>Actively participating in open-source projects can help you build relationships with maintainers and other contributors. By contributing code, documentation, or bug fixes, you can become part of the community and receive support from experienced contributors.</li> </ul> <ol> <li>Read the Documentation:</li> </ol> <ul> <li>Always start by reading the project\u2019s documentation. Many common questions are answered in project documentation, including installation instructions, configuration details, and usage guidelines.</li> </ul> <ol> <li>Stack Overflow:</li> </ol> <ul> <li>Sometimes, GitHub projects have a presence on Stack Overflow. You can search for questions related to the project using the project\u2019s name as a tag and find answers or ask your own questions.</li> </ul> <ol> <li>GitHub Discussions in Related Organizations:</li> </ol> <ul> <li>If a project doesn\u2019t have a dedicated \u201cDiscussions\u201d section, it may be part of a larger organization or community. Check the organization\u2019s or community\u2019s GitHub repository or forum for relevant discussions and support.</li> </ul> <ol> <li>Twitter and Social Media:</li> </ol> <ul> <li>Some open-source maintainers and projects share updates and interact with the community on Twitter and other social media platforms. Following these accounts can keep you informed and provide opportunities to engage.</li> </ul> <ol> <li>Meetups and Conferences:</li> </ol> <ul> <li>Some open-source communities organize virtual or in-person meetups and conferences. Attending these events can help you connect with maintainers and other community members.</li> </ul> <ol> <li>GitHub Actions and CI/CD Workflows:</li> </ol> <ul> <li>If you\u2019re having trouble with CI/CD workflows or GitHub Actions, consult the GitHub Actions documentation, and consider asking questions on the GitHub Community Forum\u2019s Actions category.</li> </ul> <ol> <li> <p>GitHub Community Forum:</p> <ul> <li>The GitHub Community Forum is a place where GitHub users discuss various topics related to GitHub. You can ask questions, share knowledge, and connect with other users.</li> </ul> </li> <li> <p>Documentation Feedback:</p> <ul> <li>If you find issues or inaccuracies in a project\u2019s documentation, consider opening a documentation-related issue in the project\u2019s repository. This helps improve the documentation for everyone.</li> </ul> </li> </ol> <p>When seeking community support on GitHub, remember to be respectful, provide clear information about your issue or question, and follow any guidelines or codes of conduct set by the project maintainers and the community. Your active and constructive participation in the community can lead to valuable connections and a positive experience.</p>"},{"location":"chapters/chapter_06/#exploring-projects","title":"Exploring projects","text":"<p>Exploring GitHub projects is a great way to discover interesting open-source repositories, contribute to existing projects, or find solutions to coding challenges. Here\u2019s how you can explore GitHub projects:</p> <ol> <li>GitHub Explore Page:</li> </ol> <p>The GitHub Explore page is a curated collection of repositories and topics. You can access it by going to https://github.com/explore. Here, you\u2019ll find various categories and topics to explore, such as trending repositories, programming languages, and more.</p> <ol> <li>GitHub Search:</li> </ol> <p>Use GitHub\u2019s search bar to find repositories based on keywords, topics, or user accounts. You can enter specific search queries like \u201cJavaScript frameworks,\u201d \u201cmachine learning,\u201d or \u201cweb development\u201d to find relevant projects.</p> <ul> <li>To search for repositories, go to the GitHub homepage (https://github.com/) and enter your query in the search bar at the top.</li> </ul> <ol> <li>Browse GitHub Topics:</li> </ol> <p>GitHub has a Topics feature that allows repository owners to add relevant topics to their projects. You can browse these topics to find repositories related to specific areas of interest.</p> <ul> <li>To browse topics, go to https://github.com/topics and select a topic that interests you.</li> </ul> <ol> <li>GitHub Collections:</li> </ol> <p>GitHub Collections are themed collections of repositories created by GitHub. These collections often include repositories that are grouped by subject or purpose, making it easier to discover projects.</p> <ul> <li>To access GitHub Collections, visit https://github.com/collections.</li> </ul> <ol> <li>Explore GitHub Trending:</li> </ol> <p>GitHub Trending showcases the most popular repositories and projects on GitHub for a specific timeframe (daily, weekly, or monthly). This is a great way to discover what\u2019s currently trending in the open-source community.</p> <ul> <li>To view GitHub Trending, go to https://github.com/trending.</li> </ul> <ol> <li>Use GitHub\u2019s Advanced Search:</li> </ol> <p>GitHub offers an advanced search feature that allows you to filter repositories based on various criteria, such as stars, forks, programming languages, and more. You can access it by clicking \u201cAdvanced search\u201d next to the search bar on the GitHub homepage.</p> <ol> <li>GitHub Topics in Repositories:</li> </ol> <p>When you visit a repository on GitHub, you can explore the topics associated with it. These topics can provide additional context about the project and related technologies.</p> <ol> <li>Follow Users and Organizations:</li> </ol> <p>Consider following GitHub users and organizations whose projects interest you. Their activity and repositories will appear in your GitHub feed, making it easier to discover new projects.</p> <ol> <li>GitHub Discussions and README Files:</li> </ol> <p>Explore the \u201cDiscussions\u201d tab and the README file of repositories. These sections often contain valuable information about the project\u2019s goals, how to get started, and potential ways to contribute.</p> <ol> <li> <p>Participate in Open Source Events:</p> <p>Join open-source events such as Hacktoberfest or specific community events organized around a programming language or technology. These events often promote collaboration and can help you discover interesting projects.</p> </li> </ol> <p>Remember that GitHub is a vast platform with millions of repositories covering a wide range of topics and technologies. Take your time to explore, read documentation, and engage with the community to find the projects that align with your interests and goals.</p>"},{"location":"chapters/references/","title":"References","text":"<ol> <li> <p>When we share, everyone wins. Accessed: 2022-08-11. URL: https://creativecommons.org/.\u00a0\u21a9</p> </li> </ol>"},{"location":"keywords/","title":"Keywords","text":"<p>Here\u2019s a lit of used keywords:</p> <ol> <li> <p>When we share, everyone wins. Accessed: 2022-08-11. URL: https://creativecommons.org/.mkdocs\u00a0\u21a9</p> </li> </ol>"}]}